// --------------------
// Generator & Datasource
// --------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
// Enums
// --------------------

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum Tier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

// --------------------
// Core User Management
// --------------------

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String?
  password          String
  role              Role          @default(USER)
  orgId             String?
  organization      Organization? @relation(fields: [orgId], references: [id])
  accounts          Account[]
  impersonationLogs ImprLog[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  History           History[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
}

// --------------------
// Organizations
// --------------------

model Organization {
  id            String         @id @default(cuid())
  name          String
  logoUrl       String?
  tier          Tier           @default(FREE)
  users         User[]
  orgSettings   OrgSettings?
  subscriptions OrganizationSubscription[]
  properties    Property[]
  contacts      Contact[]
  companies     Company[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ImprLog       ImprLog[]
  History       History[]
  Deal          Deal[]
  FeatureToggle FeatureToggle[]
}

model OrgSettings {
  id                 String       @id @default(cuid())
  orgId              String       @unique
  organization       Organization @relation(fields: [orgId], references: [id])
  exportSchedule     String       @default("daily")
  allowImpersonation Boolean      @default(false)
  allowExport        Boolean      @default(true)
  notifications      Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model GlobalSettings {
  id          String   @id @default(cuid())
  maintenance Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --------------------
// CRM Core
// --------------------

model Contact {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  name         String
  email        String?
  phone        String?
  companyId    String?
  company      Company?     @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Deal         Deal[]
}

model Company {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  name         String
  industry     String?
  contacts     Contact[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Deal         Deal[]
}

model Property {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  name         String
  address      String
  tenants      Tenant[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Tenant {
  id         String     @id @default(cuid())
  propertyId String
  property   Property   @relation(fields: [propertyId], references: [id])
  name       String
  email      String?
  phone      String?
  reminders  Reminder[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Reminder {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  message   String
  dueDate   DateTime
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// --------------------
// Billing / Plans (Phase 4 Enhancements)
// --------------------

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  priceId     String   // Stripe Product/Price ID
  currency    String   @default("usd")
  interval    String   // "month" or "year"
  features    Json     // list of enabled features
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions OrganizationSubscription[]
}

model OrganizationSubscription {
  id               String           @id @default(cuid())
  orgId            String
  organization     Organization     @relation(fields: [orgId], references: [id])
  planId           String
  plan             SubscriptionPlan @relation(fields: [planId], references: [id])
  status           String           // active, canceled, past_due
  currentPeriodEnd DateTime
  seats            Int              @default(1)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model FeatureToggle {
  id             String       @id @default(cuid())
  orgId          String
  organization   Organization @relation(fields: [orgId], references: [id])
  featureKey     String
  enabled        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([orgId, featureKey])
}

// --------------------
// Logs / History
// --------------------

model ImprLog {
  id           String       @id @default(cuid())
  superAdminId String
  superAdmin   User         @relation(fields: [superAdminId], references: [id])
  subscriberId String
  subscriber   Organization @relation(fields: [subscriberId], references: [id])
  startedAt    DateTime     @default(now())
  endedAt      DateTime?
  alertSent    Boolean      @default(false)
}

model History {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  action       String
  actorId      String?
  actor        User?        @relation(fields: [actorId], references: [id])
  createdAt    DateTime     @default(now())
}

// --------------------
// Deals
// --------------------

model Deal {
  id          String       @id @default(cuid())
  title       String
  description String?
  amount      Float?
  stage       String
  probability Int?
  status      String       @default("open")
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id])
  companyId   String?
  company     Company?     @relation(fields: [companyId], references: [id])
  contactId   String?
  contact     Contact?     @relation(fields: [contactId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deleted     Boolean      @default(false)
}

// --------------------
// Misc
// --------------------

model GlobalLog {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
}

// --------------------
// Generator & Datasource
// --------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
// Enums
// --------------------

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum Tier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

// --------------------
// Core User Management
// --------------------

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String?
  password          String
  role              Role          @default(USER)
  orgId             String?
  organization      Organization? @relation(fields: [orgId], references: [id])
  accounts          Account[]
  impersonationLogs ImprLog[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  History           History[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
}

// --------------------
// Organizations
// --------------------

model Organization {
  id            String         @id @default(cuid())
  name          String
  logoUrl       String?
  tier          Tier           @default(FREE)
  users         User[]
  orgSettings   OrgSettings?
<<<<<<< HEAD
  subscriptions OrganizationSubscription[]
=======
  subscriptions Subscription[]
>>>>>>> ac4b396533b24013bc1866988c2033005cd609c9
  properties    Property[]
  contacts      Contact[]
  companies     Company[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  ImprLog       ImprLog[]
  History       History[]
  Deal          Deal[]
<<<<<<< HEAD
  FeatureToggle FeatureToggle[]
=======
>>>>>>> ac4b396533b24013bc1866988c2033005cd609c9
}

model OrgSettings {
  id                 String       @id @default(cuid())
  orgId              String       @unique
  organization       Organization @relation(fields: [orgId], references: [id])
  exportSchedule     String       @default("daily")
  allowImpersonation Boolean      @default(false)
  allowExport        Boolean      @default(true)
  notifications      Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model GlobalSettings {
  id          String   @id @default(cuid())
  maintenance Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --------------------
// CRM Core
// --------------------

model Contact {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  name         String
  email        String?
  phone        String?
  companyId    String?
  company      Company?     @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Deal         Deal[]
}

model Company {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  name         String
  industry     String?
  contacts     Contact[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Deal         Deal[]
}

model Property {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  name         String
  address      String
  tenants      Tenant[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Tenant {
  id         String     @id @default(cuid())
  propertyId String
  property   Property   @relation(fields: [propertyId], references: [id])
  name       String
  email      String?
  phone      String?
  reminders  Reminder[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Reminder {
<<<<<<< HEAD
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  message   String
  dueDate   DateTime
  sent      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// --------------------
// Billing / Plans (Phase 4 Enhancements)
// --------------------

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  priceId     String   // Stripe Product/Price ID
  currency    String   @default("usd")
  interval    String   // "month" or "year"
  features    Json     // list of enabled features
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions OrganizationSubscription[]
}

model OrganizationSubscription {
  id               String           @id @default(cuid())
  orgId            String
  organization     Organization     @relation(fields: [orgId], references: [id])
  planId           String
  plan             SubscriptionPlan @relation(fields: [planId], references: [id])
  status           String           // active, canceled, past_due
  currentPeriodEnd DateTime
  seats            Int              @default(1)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model FeatureToggle {
  id             String       @id @default(cuid())
  orgId          String
  organization   Organization @relation(fields: [orgId], references: [id])
  featureKey     String
  enabled        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([orgId, featureKey])
}

// --------------------
// Logs / History
// --------------------

model ImprLog {
  id           String       @id @default(cuid())
  superAdminId String
  superAdmin   User         @relation(fields: [superAdminId], references: [id])
  subscriberId String
  subscriber   Organization @relation(fields: [subscriberId], references: [id])
  startedAt    DateTime     @default(now())
  endedAt      DateTime?
  alertSent    Boolean      @default(false)
}

model History {
  id           String       @id @default(cuid())
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  action       String
  actorId      String?
  actor        User?        @relation(fields: [actorId], references: [id])
  createdAt    DateTime     @default(now())
}

// --------------------
// Deals
// --------------------

model Deal {
  id          String       @id @default(cuid())
  title       String
  description String?
  amount      Float?
  stage       String
  probability Int?
  status      String       @default("open")
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id])
  companyId   String?
  company     Company?     @relation(fields: [companyId], references: [id])
  contactId   String?
  contact     Contact?     @relation(fields: [contactId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deleted     Boolean      @default(false)
}

// --------------------
// Misc
// --------------------

model GlobalLog {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
}
=======
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     User?    @relation(fields: [tenantId], references: [id])
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  type       String
  dueAt      DateTime
  status     String   @default("PENDING")
  attempts   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReminderLog {
  id         String   @id @default(cuid())
  reminderId String
  reminder   Reminder @relation(fields: [reminderId], references: [id])
  channel    String
  status     String
  note       String?
  response   Json?
  createdAt  DateTime @default(now())
}

model Transaction {
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     User?    @relation(fields: [tenantId], references: [id])
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  type       String
  amount     Decimal  @db.Decimal(12,2)
  status     String
  description String?
  createdAt  DateTime @default(now())
}

model Application {
  id             String   @id @default(cuid())
  propertyId     String
  property       Property @relation(fields: [propertyId], references: [id])
  unit           String?
  applicantName  String
  email          String
  phone          String?
  employment     String?
  income         Decimal? @db.Decimal(12,2)
  rentalHistory  String?
  references     String?
  status         String   @default("pending")
  documentUrl    String?
  screeningResult String?
  createdAt      DateTime @default(now())
}

model AIInsight {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id])
  category    String
  insight     String
  confidence  Decimal? @db.Decimal(5,2)
  generatedAt DateTime @default(now())
}

model Document {
  id          String   @id @default(cuid())
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id])
  tenantId    String?
  tenant      User?     @relation("DocumentTenant", fields: [tenantId], references: [id])
  vendorId    String?
  vendor      ServiceProvider? @relation(fields: [vendorId], references: [id])
  type        String
  title       String?
  fileUrl     String
  uploadedBy  String?
  visibility  String   @default("private")
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaxReport {
  id         String   @id @default(cuid())
  landlordId String
  landlord   User     @relation(fields: [landlordId], references: [id])
  vendorId   String?
  vendor     User?    @relation(fields: [vendorId], references: [id])
  year       Int
  type       String
  fileUrl    String?
  createdAt  DateTime @default(now())
}

model Owner {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  leases    Lease[]
  properties OwnerProperty[]
  distributions OwnerDistribution[]
}

model OwnerProperty {
  id                  String   @id @default(cuid())
  ownerId             String
  owner               Owner    @relation(fields: [ownerId], references: [id])
  propertyId          String
  property            Property @relation(fields: [propertyId], references: [id])
  ownershipPercentage Decimal  @db.Decimal(5,2)
  createdAt           DateTime @default(now())
}

model OwnerDistribution {
  id         String   @id @default(cuid())
  ownerId    String   
  owner      Owner    @relation(fields: [ownerId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  amount     Decimal  @db.Decimal(12,2)
  date       DateTime @default(now())
  method     String   @default("ach")
}

/// --- Branding model (white-labeling & branding settings) ---
model Branding {
  id             String   @id @default(cuid())
  landlordId     String
  landlord       User     @relation(fields: [landlordId], references: [id])
  logoUrl        String?
  primaryColor   String?  // HEX like "#3498db"
  secondaryColor String?
  companyName    String?
  customDomain   String?
  emailSender    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

/// --- Property & Lease models ---
model Property {
  id        String   @id @default(cuid())
  name      String
  address   String
  units     Int
  leases    Lease[]
  createdAt DateTime @default(now())
}

model Lease {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  tenant     User?    @relation(fields: [tenantId], references: [id])
  tenantId   String?

  owner      Owner?   @relation(fields: [ownerId], references: [id])
  ownerId    String?

  startDate  DateTime?
  endDate    DateTime?
  rentAmount Float?

  payments   Payment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReportEmailLog {
  id          String   @id @default(cuid())
  adminId     String?
  recipient   String
  reportType  String
  filter      String
  filterId    String?
  startDate   DateTime?
  endDate     DateTime?
  sentAt      DateTime @default(now())
}

/// --- Maintenance requests ---
model MaintenanceRequest {
  id          String   @id @default(cuid())
  tenantId    String
  propertyId  String?
  subject     String
  description String
  status      String   @default("open")
  createdAt   DateTime @default(now())
}

/// Password reset tokens for forgot-password flow
model PasswordResetToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
>>>>>>> ac4b396533b24013bc1866988c2033005cd609c9
